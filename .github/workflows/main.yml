name: Trigger Blue/Green Deployment
on:
  workflow_dispatch:  # Allows manual triggering
  repository_dispatch:  # Can be triggered via API
  schedule:
    - cron: '0 10 * * *'  # Optional: Daily at 10am UTC (adjust as needed)

env:
  AWS_REGION: eu-west-1
  ECS_CLUSTER: TodoECSCluster
  ECS_SERVICE: TodoECSService
  CODEDEPLOY_APP: TodoApp
  CODEDEPLOY_GROUP: TodoDeploymentGroup
  TASK_DEFINITION: todo-task

jobs:
  trigger-deployment:
    name: Trigger Blue/Green Deployment
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write   # For OIDC auth
      contents: read    # For code checkout

    steps:
    - name: Checkout code (optional)
      uses: actions/checkout@v3
      if: ${{ github.event_name == 'workflow_dispatch' }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get latest task definition
      id: get-task-def
      run: |
        LATEST_REVISION=$(aws ecs describe-task-definition \
          --task-definition $TASK_DEFINITION \
          --query 'taskDefinition.revision' \
          --output text)
        echo "LATEST_REVISION=$LATEST_REVISION" >> $GITHUB_OUTPUT

    - name: Trigger CodeDeploy deployment
      id: trigger-deploy
      run: |
        aws deploy create-deployment \
          --application-name $CODEDEPLOY_APP \
          --deployment-group-name $CODEDEPLOY_GROUP \
          --revision '{
            "revisionType": "AppSpecContent",
            "appSpecContent": {
              "content": "{
                \"version\": 1,
                \"Resources\": [{
                  \"TargetService\": {
                    \"Type\": \"AWS::ECS::Service\",
                    \"Properties\": {
                      \"TaskDefinition\": \"arn:aws:ecs:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:task-definition/${{ env.TASK_DEFINITION }}:${{ steps.get-task-def.outputs.LATEST_REVISION }}\",
                      \"LoadBalancerInfo\": {
                        \"ContainerName\": \"todo-container\",
                        \"ContainerPort\": 3000
                      }
                    }
                  }
                }]
              }"
            }
          }'
        echo "Deployment triggered successfully"

    - name: Monitor deployment
      run: |
        # Get the most recent deployment ID
        DEPLOYMENT_ID=$(aws deploy list-deployments \
          --application-name $CODEDEPLOY_APP \
          --deployment-group-name $CODEDEPLOY_GROUP \
          --max-items 1 \
          --query 'deployments[0]' \
          --output text)
        
        echo "Monitoring deployment: $DEPLOYMENT_ID"
        
        # Wait for deployment completion
        aws deploy wait deployment-successful \
          --deployment-id $DEPLOYMENT_ID
        
        echo "Deployment completed successfully"

    - name: Notify on success (optional)
      if: success()
      uses: act10ns/slack@v1
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}