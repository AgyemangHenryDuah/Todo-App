name: Trigger Blue/Green Deployment
on:
  workflow_run:
    workflows: ["Build and Push to ECR"]
    types: [completed]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Trigger Deployment
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Get workflow outputs
      id: get-outputs
      uses: actions/github-script@v6
      with:
        script: |
          const run = await github.rest.actions.getWorkflowRun({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: ${{ github.event.workflow_run.id }},
          });
          return run.data.outputs;

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Trigger CodeDeploy
      run: |
        aws deploy create-deployment \
          --application-name TodoApp \
          --deployment-group-name TodoDeploymentGroup \
          --revision '{
            "revisionType": "AppSpecContent",
            "appSpecContent": {
              "content": "{
                \"version\": 1,
                \"Resources\": [{
                  \"TargetService\": {
                    \"Type\": \"AWS::ECS::Service\",
                    \"Properties\": {
                      \"TaskDefinition\": \"${{ fromJson(steps.get-outputs.outputs.result).task_def_arn }}\",
                      \"LoadBalancerInfo\": {
                        \"ContainerName\": \"todo-container\",
                        \"ContainerPort\": 3000
                      }
                    }
                  }
                }]
              }"
            }
          }'

    - name: Monitor deployment
      run: |
        DEPLOYMENT_ID=$(aws deploy list-deployments \
          --application-name TodoApp \
          --deployment-group-name TodoDeploymentGroup \
          --max-items 1 \
          --query 'deployments[0]' \
          --output text)
        
        echo "Monitoring deployment $DEPLOYMENT_ID"
        aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
        echo "Deployment completed successfully"